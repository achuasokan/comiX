<style>
  .relative input:focus + label,
  .relative input:not(:placeholder-shown) + label {
    top: -13px; /* Adjust as needed */
    left: -1px; /* Adjust as needed */
    font-size: 16px; /* Adjust as needed */
    color: #fbbf24; /* Change to your desired color */
    background-color: black; /* Add background color */
    padding: 0 4px; /* Add padding to the label */
    z-index: 1; /* Ensure the label is above the input */
  }
</style>
<%- include('../partials/header.ejs') %>
<div class="bg-black text-white flex flex-col items-center">

  <!-- Horizontal Navigation Bar -->
  <%- include('./profileSidebar.ejs') %>
  <!-- Navigation Bar end -->

  <div class="flex flex-col items-center justify-center p-6 w-full max-w-md mx-auto">
    <h2 class="text-lg font-bold mb-4">Change Password</h2>
    <form class="w-full space-y-4" action="/profile/change-password" method="post" id="changePasswordForm">
      
      <!-- flash message  -->
      <%- include('../partials/flashMessage.ejs') %>
     
      <div class="flex flex-col space-y-1 relative">   
        <input type="password" placeholder=" " id="currentPassword" name="currentPassword" class="block w-full px-2 py-2 bg-transparent text-white border border-blue-500 rounded-lg focus:outline-none focus:border-orange-500 placeholder:text-transparent transition duration-300" >
        <label for="currentPassword" class="absolute left-2 top-1 ml-2 text-white transition-all duration-300 transform origin-left scale-75 pointer-events-none">Current Password</label>
        <p id="currentPasswordError" class="text-red-500 text-sm" aria-live="assertive"></p>
      </div>

      <div class="flex flex-col space-y-1 relative"> 
        <input type="password" placeholder=" " id="newPassword" name="newPassword" class="block w-full px-2 py-2 bg-transparent text-white border border-blue-500 rounded-lg focus:outline-none focus:border-orange-500 placeholder:text-transparent transition duration-300" >
        <label for="newPassword" class="absolute left-2 top-1 ml-2 text-white transition-all duration-300 transform origin-left scale-75 pointer-events-none">New Password</label>
        <p id="newPasswordError" class="text-red-500 text-sm" aria-live="assertive"></p>
        <button type="button" id="toggleNewPasswords" class="absolute right-2 top-1 text-orange-500">
          <span class="material-icons" id="NewPasswordEyeIcon">visibility</span>
        </button>
      </div>

      <div class="flex flex-col space-y-1 relative"> 
        <input type="password" placeholder=" " id="confirmPassword" name="confirmPassword" class="block w-full px-2 py-2 bg-transparent text-white border border-blue-500 rounded-lg focus:outline-none focus:border-orange-500 placeholder:text-transparent transition duration-300" >
        <label for="confirmPassword" class="absolute left-2 top-1 ml-2 text-white transition-all duration-300 transform origin-left scale-75 pointer-events-none">Confirm Password</label>
        <p id="confirmPasswordError" class="text-red-500 text-sm" aria-live="assertive"></p>
        <button type="button" id="toggleConfirmPasswords" class="absolute right-2 top-1 text-orange-500">
          <span class="material-icons" id="confirmPasswordEyeIcon">visibility</span>
        </button>
      </div>

      <div class="flex justify-center">
        <button type="submit" class="bg-yellow-400 text-black py-2 px-4 rounded">Change Password</button>
      </div>
    </form>
  </div>
</div>
<%- include('../partials/footer.ejs') %>

<script>
  const form = document.getElementById('changePasswordForm');
  const currentPassword = document.getElementById('currentPassword');
  const newPassword = document.getElementById('newPassword');
  const confirmPassword = document.getElementById('confirmPassword');

  const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*])(?!.*\s)[A-Za-z\d!@#$%^&*]{6,}$/;

  newPassword.addEventListener("input", function() {
    if (!passwordPattern.test(newPassword.value)) {
      newPasswordError.textContent = "Password must be at least 6 characters long, include upper and lower case letters, a digit and a special character.";
    } else {
      newPasswordError.textContent = "";
    }
  });

  confirmPassword.addEventListener("input", function() {
    if (newPassword.value !== confirmPassword.value) {
      confirmPasswordError.textContent = "The passwords you entered do not match. Please try again.";
    } else {
      confirmPasswordError.textContent = "";
    }
  });

  form.addEventListener('submit', function(event) {
    let valid = true;

    if (!passwordPattern.test(newPassword.value)) {
      newPasswordError.textContent = "Password must be at least 6 characters long, include upper and lower case letters, a digit and a special character.";
      valid = false;
    }

    if (newPassword.value !== confirmPassword.value) {
      confirmPasswordError.textContent = "The passwords you entered do not match. Please try again.";
      valid = false;
    }

    if (!valid) {
      event.preventDefault();
    }
  });

  // Toggle password visibility
  const toggleNewPasswords = document.getElementById('toggleNewPasswords');
  const newPasswordInputs = document.getElementById('newPassword');
  const newPasswordEyeIcon = document.getElementById('NewPasswordEyeIcon');

  toggleNewPasswords.addEventListener('click', function() {
    const type = newPasswordInputs.getAttribute('type') === 'password' ? 'text' : 'password';
    newPasswordInputs.setAttribute('type', type);
    newPasswordEyeIcon.textContent = type === 'password' ? 'visibility' : 'visibility_off';

    if (type == 'text') {
      newPasswordInputs.classList.add('border-orange-500');
    }
  });

  // Toggle confirm password visibility
  const toggleConfirmPasswords = document.getElementById('toggleConfirmPasswords');
  const confirmPasswordInputs = document.getElementById('confirmPassword');
  const confirmPasswordEyeIcon = document.getElementById('confirmPasswordEyeIcon');

  toggleConfirmPasswords.addEventListener('click', function() {
    const type = confirmPasswordInputs.getAttribute('type') === 'password' ? 'text' : 'password';
    confirmPasswordInputs.setAttribute('type', type);
    confirmPasswordEyeIcon.textContent = type === 'password' ? 'visibility' : 'visibility_off';

    if (type == 'text') {
      confirmPasswordInputs.classList.add('border-orange-500');
    }
  });
</script>
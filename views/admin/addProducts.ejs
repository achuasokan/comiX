<div class="bg-[#18191a] text-gray-200 m-0 p-0 flex flex-col md:flex-row min-h-screen">
    <!-- Sidebar -->
    <%- include("./sidebar.ejs") %>
    <!-- Sidebar end -->

    <!-- Products Adding forms -->
    <div class="container mx-auto py-6">
        <h1 class="text-2xl font-semibold mb-4 text-gray-200">Add Product</h1>

        <form action="/admin/addProduct" method="POST" enctype="multipart/form-data" id="add-product-form"
            class="bg-[#242526] p-6 rounded shadow-md">
            <div class="mb-4">
                <label class="block text-gray-300">Product Name</label>
                <input type="text" id="productName" name="productName" required
                    class="input w-full bg-[#1f1f1f] text-gray-200 border border-gray-600 rounded-md p-2 mb-4" />
                    <p id="productNameError" class="text-red-500 text-sm"aria-live="assertive"></p>
            </div>
            <div class="mb-4">
                <label class="block text-gray-300">Description</label>
                <textarea id="description" name="description" required
                    class="input w-full bg-[#1f1f1f] text-gray-200 border border-gray-600 rounded-md p-2 mb-4"></textarea>
                    <p id="descriptionError" class="text-red-500 text-sm"aria-live="assertive"></p>
            </div>

            <div class="mb-4">
                <label class="block text-gray-300">Category</label>
                <select id="category" name="category"
                    class="input w-full bg-[#1f1f1f] text-white border border-gray-600 rounded-md p-2 mb-4">
                    <option value="">Select Category</option>
                    <% categorylist.forEach((category) => { %>
                    <option value="<%= category._id %>"><%= category.name %></option>
                    <% }); %>
                </select>
                <p id="categoryError" class="text-red-500 text-sm"aria-live="assertive"></p>
            </div>

            <div class="mb-4">
                <label class="block text-gray-300">Price</label>
                <input type="text" id="price" name="price" required
                    class="input w-full bg-[#1f1f1f] text-gray-200 border border-gray-600 rounded-md p-2 mb-4" />
                    <p id="priceError" class="text-red-500 text-sm"aria-live="assertive"></p>
            </div>
            <div class="mb-4">
                <label class="block text-gray-300">Stock</label>
                <input type="text" id="stock" name="stock" required
                    class="input w-full bg-[#1f1f1f] text-gray-200 border border-gray-600 rounded-md p-2 mb-4" />
                    <p id="stockError" class="text-red-500 text-sm"aria-live="assertive"></p>
            </div>

            <div class="mb-4">
                <label class="block text-gray-300">SKU</label>
                <input type="text" id="SKU" name="SKU" required
                    class="input w-full bg-[#1f1f1f] text-gray-200 border border-gray-600 rounded-md p-2 mb-4" />
                    <p id="SKUError" class="text-red-500 text-sm"aria-live="assertive"></p>
            </div>

            <div class="mb-4">
                <label class="block text-gray-300">Images</label>
                <input type="file" id="imageInput" name="image" accept="image/*" multiple required
                    class="input w-full bg-[#1f1f1f] text-gray-200 border border-gray-600 rounded-md p-2 mb-4"
                    onchange="previewImages(event)" />
                <div class="mt-2 flex flex-wrap " id="imagePreviewContainer"></div> <!-- Container for multiple previews -->
                <p id="imageError" class="text-red-500 text-sm"aria-live="assertive"></p>
            </div>

            <!-- Cropper modal -->
            <div id="cropperModal"
                class="hidden fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
                <div class="bg-white p-4 rounded">
                    <div class="w-full h-96">
                        <img id="croppingImage" src="" alt="Image to Crop" class="w-full h-full object-cover" />
                    </div>
                    <button id="cropConfirm" class="bg-green-500 text-white px-4 py-2 mt-2 rounded"type="button"
                        onclick="cropImage()">
                        Confirm Crop
                    </button>
                    <button id="cropCancel" class="bg-red-500 text-white px-4 py-2 mt-2 rounded"
                        onclick="closeCropModal()">
                        Cancel
                    </button>
                </div>
            </div>

            <!-- <div class="mb-4">
                <label class="block text-gray-300">Discount</label>
                <input type="text"id="discount" name="discount"
                    class="input w-full bg-[#1f1f1f] text-gray-200 border border-gray-600 rounded-md p-2 mb-4" />
                    <p id="discountError" class="text-red-500 text-sm"aria-live="assertive"></p>
            </div> -->

            <button type="submit" class="bg-primary text-white px-4 py-2 rounded">
                Add Product
            </button>
        </form>
    </div>
</div>
<script>
    const form = document.getElementById('add-product-form');
    const productNameInput = document.getElementById('productName');
    const descriptionInput = document.getElementById('description');
    const categoryInput = document.getElementById('category');
    const priceInput = document.getElementById('price');
    const stockInput = document.getElementById('stock');
    const SKUInput = document.getElementById('SKU');
    const discountInput = document.getElementById('discount');

    const productNameError = document.getElementById('productNameError');
    const descriptionError = document.getElementById('descriptionError');
    const categoryError = document.getElementById('categoryError');
    const priceError = document.getElementById('priceError');
    const stockError = document.getElementById('stockError');
    const SKUError = document.getElementById('SKUError');
    // const discountError = document.getElementById('discountError');

    document.addEventListener('DOMContentLoaded', () => {
        // Attach input event listeners
        productNameInput.addEventListener('input', validateProductName);
        descriptionInput.addEventListener('input', validateDescription);
        categoryInput.addEventListener('change', validateCategory);
        priceInput.addEventListener('input', validatePrice);
        stockInput.addEventListener('input', validateStock);
        SKUInput.addEventListener('input', validateSKU);
        // discountInput.addEventListener('input', validateDiscount);

        function validateProductName() {
    const productName = productNameInput.value.trim();
    const regex = /^[a-zA-Z0-9\s]+$/; // Allow only letters, numbers, and spaces
    if (productName.length < 3 || productName.length > 50 || productName === "" || !regex.test(productName)) {
        productNameError.textContent = 'Product Name must be between 3 and 50 characters and cannot contain special characters..';
    } else {
        productNameError.textContent = '';
    }
}

        function validateDescription() {
            const description = descriptionInput.value.trim();
            if (description.length < 10 || description.length > 1000) {
                descriptionError.textContent = 'Product description must be between 10 to 1000 characters.';
            } else {
                descriptionError.textContent = '';
            }
        }

        function validateCategory() {
            const category = categoryInput.value;
            if (!category) {
                categoryError.textContent = 'Please select a category.';
            } else {
                categoryError.textContent = '';
            }
        }

        function validatePrice() {
            const price = parseFloat(priceInput.value);
            if (isNaN(price) || price <= 0) {
                priceError.textContent = 'Product Price must be greater than zero.';
            } else {
                priceError.textContent = '';
            }
        }

        function validateStock() {
            const stock = parseInt(stockInput.value);
            if (isNaN(stock) || stock < 0) {
                stockError.textContent = 'Stock should be a number and must be zero or greater.';
            } else {
                stockError.textContent = '';
            }
        }

        function validateSKU() {
            const SKU = SKUInput.value.trim();
            if (!/^[a-zA-Z0-9\-]+$/.test(SKU)) {
                SKUError.textContent = 'Invalid SKU format.';
            } else {
                SKUError.textContent = '';
            }
        }

        // function validateDiscount() {
        //     const discount = parseFloat(discountInput.value);
        //     if (isNaN(discount) || discount < 0 || discount > 100) {
        //         discountError.textContent = 'Discount must be a number between 0 and 100.';
        //     } else {
        //         discountError.textContent = '';
        //     }
        // }

        form.addEventListener('submit', function (event) {
            // Run all validations on form submit
            validateProductName();
            validateDescription();
            validateCategory();
            validatePrice();
            validateStock();
            validateSKU();
            // validateDiscount();

            // Check if there are any errors
            const hasErrors = productNameError.textContent || descriptionError.textContent || categoryError.textContent ||
                priceError.textContent || stockError.textContent || SKUError.textContent ||

            console.log('Validation Errors:', hasErrors); // Debugging line

            if (hasErrors) {
                event.preventDefault();  // Prevent form submission if there are validation errors
                console.log('Form submission prevented due to validation errors.'); // Debugging line
            }
        });
    });
</script>
